
INTRODUCAO - CSS ANIMACOES



Property	Animatable	View
background	As each of the background-color, background-position, and background-size properties (only these three are animatable). See below for more info on these properties.	
background-color	As a color	
background-position	As repeatable list of simple list of length, percentage, or calc.	
background-size	As repeatable list of simple list of length, percentage, or calc.	
border	As each of the properties for border width and border color. Border style is not animatable. See below for more information on these individual properties.	
border-color	As a color of the specific border color properties.	
border-width	As a color of the specific border width properties.	
border-bottom	As a color and width of the specific border properties.	
border-bottom-color	As a color.	
border-bottom-left-radius	As a length, percentage or calc.	
border-bottom-right-radius	As a length, percentage or calc.	
border-bottom-width	As a length.	
border-left	As a color and width of the specific border properties.	
border-left-color	As a color.	
border-left-width	As a length.	
border-radius	See individual properties.	
border-right	As a color and width of the specific border properties.	
border-right-color	As a color.	
border-right-width	As a length.	
border-spacing	As a simple list of length.	
border-top	As a color and width of the specific border properties.	
border-top-color	As a color.	
border-top-left-radius	As a length, percentage or calc.	
border-top-right-radius	As a length, percentage or calc.	
border-top-width	As a length.	
bottom	As a length, percentage, or calc.	
box-shadow	As a shadow list.	
caret-color	As a color.	
clip	As a rectangle.	
color	As a color.	
column-count	As an integer.	
column-gap	As a length.	
column-rule	As each of the properties of the shorthand. See individual properties.	
column-rule-color	As a color.	
column-rule-width	As a length.	
column-width	As a length.	
columns	As each of the properties of the shorthand. See the individual properties.	
content	Discrete.	
filter		
flex	As each of the properties of the shorthand. See the individual properties.	
flex-basis	As a length, percentage or calc.	
flex-grow	As a number.	
flex-shrink	As a number.	
font	As each of the properties of the shorthand. See the individual properties.	
font-size	As a length.	
font-size-adjust	As a number.	
font-stretch	As a font stretch.	
font-weight	As a font weight.	
grid-area	Discrete.	
grid-auto-columns	Discrete.	
grid-auto-flow	Discrete.	
grid-auto-rows	Discrete.	
grid-column-end	Discrete.	
grid-column-gap	Discrete.	
grid-column-start	Discrete.	
grid-column	Discrete.	
grid-gap	Discrete.	
grid-row-end	Discrete.	
grid-row-gap	Discrete.	
grid-row-start	Discrete.	
grid-row	Discrete.	
grid-template-areas	Discrete.	
grid-template-columns	Discrete.	
grid-template-rows	Discrete.	
grid-template	Discrete.	
grid	Discrete.	
height	As a length, percentage or calc.	
left	As a length, percentage, or calc.	
letter-spacing	As a length.	
line-height	As a number or a length.	
margin	As a length.	
margin-bottom	As a length.	
margin-left	As a length.	
margin-right	As a length.	
margin-top	As a length.	
max-height	As a length, percentage or calc.	
max-width	As a length, percentage or calc.	
min-height	As a length, percentage or calc.	
min-width	As a length, percentage or calc.	
opacity	As a number.	
order	As an integer.	
outline	As each of the properties of the shorthand. See the individual properties.	
outline-color	As a color.	
outline-offset	As a length.	
outline-width	As a length.	
padding	As a length.	
padding-bottom	As a length.	
padding-left	As a length.	
padding-right	As a length.	
padding-top	As a length.	
perspective	As a length.	
perspective-origin	As a simple list of a length, percentage or calc.	
quotes	Discrete.	
right	As a length, percentage, or calc.	
tab-size	As a length.	
text-decoration	As a color (i.e. the text-decoration-color property of the shorthand).	
text-decoration-color	As a color.	
text-indent	As a length, percentage or calc.	
text-shadow	As a shadow list.	
top	As a length, percentage, or calc.	
transform	As a transform.	
vertical-align	As a length.	
visibility	As a visibility.	
width	As a length, percentage or calc.	
word-spacing	As a length.	
z-index	As an integer.










-----------------------------------------------------------------------------



PRIMEIRA ANIMACAO - KEYFRAMES

-> para fazermos uma animacao precisamos de tres coisas. 
	1-criar a animacao
	2-dizer qual a propriedade que queremos modificar
	3-dizer quanto tempo a propriedade vai levar para ir do estado A ao estado B


HTML:

<div class="box"></div>


css:

@keyframes changeColor {

	from {background-color: red;}
	to {background-color: blue;}

}

.box{
	width: 200px;
	height: 200px;
	border-style: solid;

	animation-name: changeColor;
	animation-duration: 3s;
}










-----------------------------------------------------------------------------



ADICIONANDO ESTADOS A ANIMACAO


-> aprendendemos que tinhamos estado inicial e final, agora vamos aprender a por ainda mais estados no nosso elemento, use a porcentagem da animacao 0% sendo inicio e 100% sendo final


CSS:

@keyframes changeColor {

	0% {background-color:red}
	25% {background-color:green}
	50% {background-color:yellow}
	100% {background-color:blue}

}

.box{
	width: 200px;
	height: 200px;
	border-style: solid;

	animation-name: changeColor;
	animation-duration: 3s;
}










-----------------------------------------------------------------------------



PROPRIEDADES


-> vamos agora adicionar mais um animacao, nesse caso a largura e a altura.
	-> vamos ver que é possivel modificar mais do que uma propriedade ao mesmo tempo


CSS:

@keyframes changeColor {

	0% {background-color: red; width: 200px}
	25% {background-color: green}
	50% {background-color: yellow; width: 400px}
	100% {background-color: blue; width: 200px}

}

.box{
	width: 200px;
	height: 200px;
	border-style: solid;

	animation-name: changeColor;
	animation-duration: 3s;
}










-----------------------------------------------------------------------------



DELAY


-> delay significa atraso, para pormos atraso antes de comecarmos uma animaçao
	-> se por valor negativo é como se a animação ja tivesse passado aquele tempo
		exemplo: se por -3, sendo q a animacao é 6, iremos estar em 50% da animaçao e faltando so 3s para acabar


CSS:

@keyframes changeColor {

	0% {background-color: red; width: 200px}
	25% {background-color: green}
	50% {background-color: yellow; width: 400px}
	100% {background-color: blue; width: 200px}

}

.box{
	width: 200px;
	height: 200px;
	border-style: solid;

	animation-name: changeColor;
	animation-duration: 6s;
	animation-delay: -3s;
}










-----------------------------------------------------------------------------



LOOP

-> LOOP é para quando a animacao acabar ele voltar a animacao e continuar se repetindo quantas vezes a gente definir ou para sempre usando o 'infinite'


CSS:

@keyframes changeColor {

	0% {background-color: red; width: 200px}
	25% {background-color: green}
	50% {background-color: yellow; width: 400px}
	100% {background-color: blue; width: 200px}

}

.box{
	width: 200px;
	height: 200px;
	border-style: solid;

	animation-name: changeColor;
	animation-duration: 6s;
	animation-iteration-count: infinite; 	// ou numero de vezes q vai acontecer,ex:2
}










-----------------------------------------------------------------------------



DIRECTION


-> podemos fazer a animacao comecar do 100% ao 0%, ou seja ao contrario, usando o "animation-direction:reverse;"

-> podemos usar tmb o 'animation-direction:alternate' que junto com o 'animation-interation-count:3' ele vai alternar, exemplo vai fazer a animacao 3 vezes, na primeira é do 0% ao 100%, na segunda é do 100% ao 0%, e na terceira é do 0% ao 100%, ou seja alterna a cada vez que ocorre a animacao

-> temos tmb o "animation-direction: alternate-reverse;" que comeca dos 100% ao 0% e dps 0% ao 100%, unindo as duas formas em uma só.


CSS:

@keyframes changeColor {

	0% {background-color: red; width: 200px}
	25% {background-color: green}
	50% {background-color: yellow; width: 400px}
	100% {background-color: blue; width: 200px}

}

.box{
	width: 200px;
	height: 200px;
	border-style: solid;

	animation-name: changeColor;
	animation-duration: 3s;
	animation-direction: alternate-reverse;
	animation-iteration-count: 3;
}










-----------------------------------------------------------------------------



FILL MODE


-> para deixarmos o nosso elemento da msm forma que ele terminou na animacao
	-> use: animarion-fill-mode: forwards;

-> para deixar o primeiro frame ja ativado msm com o delay carregando, exemplo: delei de 2 segundos, o elemento vai comecar com o primeiro frame da animacao por 2 seg e depois vai comecar a animacao
	-> use: 	animation-delay: 2s;
			animation-fill-mode: backwards;

-> para usamos as duas opcoes de cima, deixar carregado o primeiro frama da animacao e quando terminar o elemento ficar da msm forma que terminou a animacao
	-> use: 	animation-delay: 2s;
			animation-fill-mode: both;


CSS:

@keyframes changeColor {

	0% {background-color: red; width: 200px}
	25% {background-color: green}
	50% {background-color: yellow; width: 400px}
	100% {background-color: blue; width: 200px}

}

.box{
	width: 200px;
	height: 200px;
	border-style: solid;

	animation-name: changeColor;
	animation-duration: 3s;
	animation-direction: reverse;
	animation-delay: 2s;
	animation-fill-mode: both;
}










-----------------------------------------------------------------------------



TIMING FUNCTION

-> define a velocidade que vai ocorrer a 'movimentacao' da animacao


HTML:

	<div class="box div1">Linear</div>
	<div class="box div2">Ease</div>
	<div class="box div3">Ease-in</div>
	<div class="box div4">Ease-out</div>
	<div class="box div5">Ease-in-out</div>




CSS:

/* essa animacao faz: animacao de movimentacao de divs */


@keyframes move {
	0% {left: 0px;}
	100% {left: 300px;}
}

.box{
	position: relative;
	width: 200px;
	height: 200px;
	border-style: solid;
	animation-name: move;
	animation-duration: 3s;
	animation-fill-mode: forwards;
}


.div1{
	animation-timing-function: linear; //msm velocidade do inicio ao fim
}

.div2{
	animation-timing-function: ease; //comeca e finaliza devagar,porem no meio é rapido
}

.div3{
	animation-timing-function: ease-in; // comeca devagar e depois fica normal
}

.div4{
	animation-timing-function: ease-out; // inicio normal, mas no final fica devagar
}

.div5{
	animation-timing-function: ease-in-out; //comeca devagar e termina devagar
}










-----------------------------------------------------------------------------



SHORT HAND


-> vamos ver que tem uma maneira mais simples de declarar uma animacao, com: animation: ;
	animation: name duration timing-function delay iteration-count direction fill-mode;


CSS:


@keyframes changeColor {

	0% {background-color: red; width: 200px}
	25% {background-color: green}
	50% {background-color: yellow; width: 400px}
	100% {background-color: blue; width: 200px}

}

.box{
	position: relative;
	width: 200px;
	height: 200px;
	border-style: solid;

	/*
	animation-name: changeColor;
	animation-duration: 3s;
	animation-fill-mode: forwards;
	*/
	
	animation: changeColor 3s linear 0s 1 normal forwards;
}


.div1{
	animation-timing-function: linear; //msm velocidade do inicio ao fim
}

.div2{
	animation-timing-function: ease; //comeca e finaliza devagar,porem no meio é rapido
}

.div3{
	animation-timing-function: ease-in; // comeca devagar e depois fica normal
}

.div4{
	animation-timing-function: ease-out; // inicio normal, mas no final fica devagar
}

.div5{
	animation-timing-function: ease-in-out; //comeca devagar e termina devagar
} 










-----------------------------------------------------------------------------



TRANSITIONS


-> Se quiser mudar todas as propriedades, basta usar "all" em transition-property
	-> transition-property: all;


->forma curta:  transition: propriedade duracao delay time-function, propriedade duracao delay time-function



HTML:

	<div class="btn">Click</div>



CSS:

.btn{
	display: inline-block;
	padding: 20px;
	background: #428BCA;
	color: #fff;
	font-size: 30px;

	/*
	transition-property: background-color, padding;
	transition-duration: 500ms, 1s;
	transition-delay: 100ms;
	transition-timing-function: ease;
	*/

	transition: background-color 500ms 1s ease-out, padding 800ms;

}

.btn:hover{
	background-color: #2248CA;
	padding-left: 30px;
	padding-right: 30px;

}













































